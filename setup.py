#!/usr/bin/env python3
"""
Setup script for CISA KEV ETL Connector
File: setup.py
Author: Rohith Arumugam S - 3122225001110
Description: Automated setup and testing script for the ETL connector
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def print_header():
    """Print setup header"""
    print("=" * 60)
    print("CISA KEV ETL Connector - Automated Setup")
    print("Author: Rohith Arumugam S - 3122225001110")
    print("=" * 60)

def check_python_version():
    """Check if Python version is compatible"""
    print("Checking Python version...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 7):
        print("‚ùå Error: Python 3.7 or higher is required")
        print(f"Current version: {version.major}.{version.minor}.{version.micro}")
        return False
    print(f"‚úÖ Python version OK: {version.major}.{version.minor}.{version.micro}")
    return True

def create_virtual_environment():
    """Create and activate virtual environment"""
    print("\nCreating virtual environment...")
    try:
        subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
        print("‚úÖ Virtual environment created successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to create virtual environment: {e}")
        return False

def get_activation_command():
    """Get the appropriate activation command for the current OS"""
    if platform.system() == "Windows":
        return "venv\\Scripts\\activate"
    else:
        return "source venv/bin/activate"

def install_dependencies():
    """Install required dependencies"""
    print("\nInstalling dependencies...")
    
    # Determine pip path based on OS
    if platform.system() == "Windows":
        pip_path = "venv\\Scripts\\pip"
    else:
        pip_path = "venv/bin/pip"
    
    try:
        subprocess.run([pip_path, "install", "-r", "requirements.txt"], check=True)
        print("‚úÖ Dependencies installed successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to install dependencies: {e}")
        return False

def check_mongodb():
    """Check if MongoDB is accessible"""
    print("\nChecking MongoDB connectivity...")
    try:
        import pymongo
        client = pymongo.MongoClient('mongodb://localhost:27017/', serverSelectionTimeoutMS=3000)
        client.admin.command('ping')
        client.close()
        print("‚úÖ MongoDB connection successful")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  MongoDB connection failed: {e}")
        print("Note: You can still use MongoDB Atlas cloud service")
        return False

def test_api_connectivity():
    """Test CISA API connectivity"""
    print("\nTesting CISA API connectivity...")
    try:
        import requests
        response = requests.head("https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json", timeout=10)
        if response.status_code == 200:
            print("‚úÖ CISA API accessible")
            return True
        else:
            print(f"‚ö†Ô∏è  CISA API returned status code: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Failed to connect to CISA API: {e}")
        return False

def create_env_file():
    """Create .env file if it doesn't exist"""
    print("\nSetting up environment configuration...")
    
    if Path(".env").exists():
        print("‚úÖ .env file already exists")
        return True
    
    env_content = """# Environment Configuration for CISA KEV Catalog ETL Connector
# Generated by setup.py

# API Configuration - CISA KEV Catalog
API_BASE_URL=https://www.cisa.gov
API_ENDPOINT=/sites/default/files/feeds/known_exploited_vulnerabilities.json
RATE_LIMIT_DELAY=2.0

# MongoDB Configuration (Local)
MONGO_URI=mongodb://localhost:27017/
MONGO_DATABASE=etl_database
MONGO_COLLECTION=cisa_kev_raw

# Uncomment and modify for MongoDB Atlas:
# MONGO_URI=mongodb+srv://username:password@cluster.mongodb.net/

# Logging Configuration
LOG_LEVEL=INFO
"""
    
    try:
        with open(".env", "w") as f:
            f.write(env_content)
        print("‚úÖ .env file created successfully")
        return True
    except Exception as e:
        print(f"‚ùå Failed to create .env file: {e}")
        return False

def run_test_pipeline():
    """Run a test of the ETL pipeline"""
    print("\nRunning ETL pipeline test...")
    
    # Determine python path based on OS
    if platform.system() == "Windows":
        python_path = "venv\\Scripts\\python"
    else:
        python_path = "venv/bin/python"
    
    try:
        # First test just the connection
        test_code = """
from etl_connector import CISAKEVETLConnector
import sys

print("Testing ETL connector initialization...")
connector = CISAKEVETLConnector()

print("Testing MongoDB connection...")
if connector.connect_to_mongodb():
    print("‚úÖ MongoDB connection test passed")
    # Get some basic stats if data exists
    stats = connector.get_pipeline_stats()
    if stats.get('total_kevs', 0) > 0:
        print(f"üìä Existing KEV records: {stats['total_kevs']}")
else:
    print("‚ö†Ô∏è  MongoDB connection test failed")

print("Setup test completed!")
"""
        
        result = subprocess.run([python_path, "-c", test_code], 
                              capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ ETL connector test passed")
            print(result.stdout)
            return True
        else:
            print("‚ùå ETL connector test failed")
            print("STDOUT:", result.stdout)
            print("STDERR:", result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è  Test timed out (this might be normal for first run)")
        return False
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        return False

def print_next_steps():
    """Print next steps for the user"""
    activation_cmd = get_activation_command()
    
    print("\n" + "=" * 60)
    print("SETUP COMPLETE!")
    print("=" * 60)
    print("\nNext steps:")
    print(f"1. Activate virtual environment: {activation_cmd}")
    print("2. Ensure MongoDB is running (local) or configure Atlas connection in .env")
    print("3. Run the ETL pipeline: python etl_connector.py")
    print("\nOptional:")
    print("- Modify .env file for custom configuration")
    print("- Check logs in etl_connector.log after running")
    print("- Use mongosh to explore the data: db.cisa_kev_raw.find().limit(1)")
    
    print("\nTroubleshooting:")
    print("- MongoDB issues: Ensure MongoDB service is running")
    print("- Network issues: Check internet connectivity")
    print("- Import errors: Ensure virtual environment is activated")

def main():
    """Main setup function"""
    print_header()
    
    # Check Python version
    if not check_python_version():
        sys.exit(1)
    
    # Create virtual environment
    if not create_virtual_environment():
        sys.exit(1)
    
    # Install dependencies
    if not install_dependencies():
        sys.exit(1)
    
    # Create .env file
    if not create_env_file():
        sys.exit(1)
    
    # Check MongoDB (optional)
    mongodb_ok = check_mongodb()
    
    # Test API connectivity
    api_ok = test_api_connectivity()
    
    # Run test pipeline
    test_ok = run_test_pipeline()
    
    # Print summary
    print("\n" + "=" * 60)
    print("SETUP SUMMARY")
    print("=" * 60)
    print(f"‚úÖ Python version: OK")
    print(f"‚úÖ Virtual environment: Created")
    print(f"‚úÖ Dependencies: Installed")
    print(f"‚úÖ Environment config: Created")
    print(f"{'‚úÖ' if mongodb_ok else '‚ö†Ô∏è '} MongoDB: {'OK' if mongodb_ok else 'Not accessible (use Atlas)'}")
    print(f"{'‚úÖ' if api_ok else '‚ùå'} CISA API: {'OK' if api_ok else 'Not accessible'}")
    print(f"{'‚úÖ' if test_ok else '‚ö†Ô∏è '} ETL Test: {'Passed' if test_ok else 'Needs MongoDB'}")
    
    if not api_ok:
        print("\n‚ö†Ô∏è  Warning: CISA API not accessible. Check internet connectivity.")
    
    print_next_steps()

if __name__ == "__main__":
    main()